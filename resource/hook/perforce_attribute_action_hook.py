# :coding: utf-8
# :copyright: Copyright (c) 2019 ftrack

import logging


import ftrack_api
from ftrack_action_handler.action import BaseAction

logger = logging.getLogger(
    'ftrack_perforce_location.perforce_attribute_action_hook')


class PerforceAttributeAction(BaseAction):
    label = 'Configure Project Perforce'
    identifier = 'com.ftrack.ftrack_perforce_location.perforce_attribute'
    description = 'Configure various Perforce options for the current project'

    def discover(self, session, entities, event):
        '''Return True to be discovered when *entities* is a single Project.
        '''
        if not entities or len(entities) != 1:
            return False

        entity_type, entity_id = entities[0]

        return entity_type == 'Project'

    def interface(self, session, entities, event):
        # Add attribute if needed, set attribute
        values = event['data'].get('values', {})
        if values:
            return

        entity_type, entity_id = entities[0]

        self._session = ftrack_api.Session()
        self._create_attribute(entity_id)

        project = self.session.get(entity_type, entity_id)
        current_value = project['custom_attributes'].get(
            'own_perforce_depot', False)

        widgets = [{
            'type': 'boolean',
            'label': 'Project should have its own Perforce depot:',
            'name': 'own_depot',
            'value': current_value
        }]

        return widgets

    def launch(self, session, entities, event):
        # Take the values, do some stuff
        entity_type, entity_id = entities[0]
        values = event['data'].get('values', {})

        project = self.session.get(entity_type, entity_id)
        project['custom_attributes']['own_perforce_depot'] = (
            values['own_depot'])
        self.session.commit()

        return True

    def _create_attribute(self, project_id):
        admin_role = self.session.query(
            'SecurityRole where name is "{0}"'.format('Administrator')).one()
        all_roles = self.session.query('SecurityRole').all()
        attribute_group = self.session.ensure(
            'CustomAttributeGroup',
            {'name': 'Perforce'})
        boolean_type = self.session.query(
            'select id from CustomAttributeType where name is "{0}"'.format(
                'boolean')
        ).one()

        # Leaves roles off the identifying_keys list since the query
        # generated by ensure() would fail.
        perforce_attribute = self.session.ensure(
            'CustomAttributeConfiguration',
            {
                'default': 0,
                'entity_type': 'show',
                'group_id': attribute_group['id'],
                'key': 'own_perforce_depot',
                'label': 'Project requires own depot',
                'project_id': project_id,
                'read_security_roles': all_roles,
                'type_id': boolean_type['id'],
                'write_security_roles': [admin_role],
            },
            identifying_keys=['entity_type', 'key', 'project_id', 'type_id'])

        return perforce_attribute


def register(session):
    '''Register Perforce attribute action with an ftrack_api *session*.'''
    if not isinstance(session, ftrack_api.Session):
        # Exit to avoid registering this plugin again in the old API.
        return

    logger.info('Registering Perforce attribute action')
    action = PerforceAttributeAction(session)
    action.register()
